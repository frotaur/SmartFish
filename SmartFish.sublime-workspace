{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Jun  2 22:45:14 2018\n\n@author: Vassilis\n\"\"\"\n\nimport numpy as np\n\nclass Vect2D:\n\tdef __init__(self,vec=(0,0)):\n\t\t\"\"\"Constructor expects a pair of numbers, in a tuple, list or Vect2D\"\"\"\n\t\tif(isinstance(vec,Vect2D)):\n\t\t\tself._vec = np.array(vec._vec)\n\t\telse:\n\t\t\tself._vec = np.array(vec)\n\n\tdef get_x(self):\n\t\treturn self._vec[0]\n\tdef get_y(self):\n\t\treturn self._vec[1]\n\tdef get_r(self):\n\t\treturn self.norm()\n\tdef get_phi(self):\n\t\tif(self.x==0 and self.y == 0):\n\t\t\treturn 0\n\t\treturn np.arctan2(self.y,self.x)\n\n\tdef set_x(self,x):\n\t\tself._vec[0] =x\n\tdef set_y(self,y):\n\t\tself._vec[1]=y\n\tdef set_r(self,r):\n\t\tself._vec = r/self.norm()*self._vec\n\tdef set_phi(self,phi):\n\t\t\"\"\" Set phi in radians \"\"\"\n\t\tr=self.r\n\t\tself.x = np.cos(phi)*r\n\t\tself.y = np.sin(phi)*r\n\n\tx = property(get_x,set_x)\n\ty = property(get_y,set_y)\n\tr = property(get_r,set_r)\n\tphi = property(get_phi,set_phi)\n\n\tdef __str__(self):\n\t\treturn \"({},{})\".format(self._vec[0],self._vec[1])\n\n\tdef __add__(self, v2):\n\t\t\"\"\"Addition operator with +\"\"\"\n\t\treturn Vect2D(self._vec+v2._vec)\n\n\tdef __sub__(self, v2):\n\t\t\"\"\"Substraction operator with -\"\"\"\n\t\treturn self+(-1)*v2\n\n\tdef __mul__(self,v2):\n\t\t\"\"\"Works as multiplication by a scalar, or dot product for 2 vectors\"\"\"\n\t\tif(isinstance(v2,Vect2D)):\n\t\t\treturn np.dot(self._vec,v2._vec)\n\t\telse:\n\t\t\treturn Vect2D(v2*self._vec)\n\n\tdef __rmul__(self,nb):\n\t\t\"\"\"Multiplication with a number of the left.\"\"\"\n\t\treturn Vect2D(nb*self._vec)\n\n\tdef __neg__(self):\n\t\treturn self*(-1)\n\n\tdef __xor__(self,v2):\n\t\t\"\"\"Cross product operator with ^\"\"\"\n\t\treturn np.cross(self._vec,v2._vec)\n\n\tdef __eq__(self,v2):\n\t\t\"\"\"Test equality of vectors. Careful if using with float vectors\"\"\"\n\t\treturn -1e-13<(self-v2).norm()<1e-13\n\n\tdef norm(self):\n\t\t\"\"\"Returns the norm of the vector\"\"\"\n\t\treturn np.sqrt(self.normSq())\n\n\tdef normSq(self):\n\t\t\"\"\"Returns the norm squared of the vector\"\"\"\n\t\treturn self.x*self.x+self.y*self.y",
			"file": "2DVect/Vect2D.py",
			"file_size": 2016,
			"file_write_time": 131729687590288584,
			"settings":
			{
				"buffer_size": 1932,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 157.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Vassilis/Desktop/Programmation/SmartFish"
	],
	"file_history":
	[
		"/C/Users/Vassilis/Desktop/Programmation/SublimeTest/kek.py",
		"/C/Users/Vassilis/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/C/Users/Vassilis/Desktop/Programmation/SmartFish/.git/COMMIT_EDITMSG",
		"/C/Users/Vassilis/AppData/Roaming/Sublime Text 3/Packages/Anaconda/Default (Windows).sublime-keymap"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sublime"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "2DVect/Vect2D.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1932,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 126.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "SmartFish.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
